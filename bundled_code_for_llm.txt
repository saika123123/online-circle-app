---
// app\layout.js
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}


---
// app\page.js
import Image from "next/image";

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Get started by editing&nbsp;
          <code className="font-mono font-bold">src/app/page.js</code>
        </p>
        <div className="fixed bottom-0 left-0 flex h-48 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:h-auto lg:w-auto lg:bg-none">
          <a
            className="pointer-events-none flex place-items-center gap-2 p-8 lg:pointer-events-auto lg:p-0"
            href="https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            By{" "}
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              className="dark:invert"
              width={100}
              height={24}
              priority
            />
          </a>
        </div>
      </div>

      <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-full sm:before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full sm:after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px] z-[-1]">
        <Image
          className="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70] dark:invert"
          src="/next.svg"
          alt="Next.js Logo"
          width={180}
          height={37}
          priority
        />
      </div>

      <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
        <a
          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Docs{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Find in-depth information about Next.js features and API.
          </p>
        </a>

        <a
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800 hover:dark:bg-opacity-30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Learn{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Learn about Next.js in an interactive course with&nbsp;quizzes!
          </p>
        </a>

        <a
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Templates{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50`}>
            Explore starter templates for Next.js.
          </p>
        </a>

        <a
          href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2 className={`mb-3 text-2xl font-semibold`}>
            Deploy{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className={`m-0 max-w-[30ch] text-sm opacity-50 text-balance`}>
            Instantly deploy your Next.js site to a shareable URL with Vercel.
          </p>
        </a>
      </div>
    </main>
  );
}


---
// pages\api\circles\[id]\join.js
import pool from '../../../../lib/db';
import verifyToken from '../../../../utils/auth';

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    try {
        const user = verifyToken(req);
        if (!user) {
            return res.status(401).json({ message: '認証が必要です' });
        }

        const { id } = req.query;

        // ユーザーがすでに参加していないか確認
        const [existingMember] = await pool.query(
            'SELECT * FROM circle_members WHERE circle_id = ? AND user_id = ?',
            [id, user.userId]
        );

        if (existingMember.length > 0) {
            return res.status(400).json({ message: 'すでにこのサークルに参加しています' });
        }

        // 参加者として追加
        await pool.query(
            'INSERT INTO circle_members (circle_id, user_id) VALUES (?, ?)',
            [id, user.userId]
        );

        res.status(200).json({ message: 'サークルに参加しました' });
    } catch (error) {
        console.error('Error in join circle API:', error);
        res.status(500).json({ message: 'サーバーエラーが発生しました' });
    }
}

---
// pages\api\circles\[id].js
import pool from '../../../lib/db';
import verifyToken from '../../../utils/auth';

export default async function handler(req, res) {
    const user = verifyToken(req);
    if (!user) {
        return res.status(401).json({ message: '認証が必要です' });
    }

    const { id } = req.query;

    if (req.method === 'GET') {
        try {
            const [circles] = await pool.query(
                `SELECT c.*, 
                CASE WHEN cm.user_id IS NOT NULL OR c.creator_id = ? THEN true ELSE false END as is_member
         FROM circles c
         LEFT JOIN circle_members cm ON c.id = cm.circle_id AND cm.user_id = ?
         WHERE c.id = ?`,
                [user.userId, user.userId, id]
            );

            if (circles.length === 0) {
                return res.status(404).json({ message: 'サークルが見つかりません' });
            }

            res.status(200).json({ circle: circles[0] });
        } catch (error) {
            console.error('Error in circle detail API:', error);
            res.status(500).json({ message: 'サーバーエラーが発生しました' });
        }
    } else {
        res.status(405).json({ message: 'Method Not Allowed' });
    }
}


---
// pages\api\circles.js
import pool from '../../lib/db';
import verifyToken from '../../utils/auth';

export default async function handler(req, res) {
    console.log('Circles API called, method:', req.method);
    try {
        const user = verifyToken(req);
        console.log('Verified user:', user);
        if (!user) {
            return res.status(401).json({ message: '認証が必要です' });
        }

        if (req.method === 'GET') {
            const { type } = req.query; // 'join' or 'check'
            let circles;

            if (type === 'join') {
                // 参加可能なサークルを取得
                [circles] = await pool.query(
                    `SELECT DISTINCT c.* 
                     FROM circles c
                     LEFT JOIN circle_members cm ON c.id = cm.circle_id
                     WHERE c.creator_id != ? 
                     AND c.id NOT IN (
                         SELECT circle_id 
                         FROM circle_members 
                         WHERE user_id = ?
                     )`,
                    [user.userId, user.userId]
                );
            } else if (type === 'check') {
                // 参加しているサークルを取得
                [circles] = await pool.query(
                    `SELECT c.* 
                     FROM circles c
                     JOIN circle_members cm ON c.id = cm.circle_id
                     WHERE cm.user_id = ?
                     UNION
                     SELECT * 
                     FROM circles
                     WHERE creator_id = ?`,
                    [user.userId, user.userId]
                );
            } else {
                return res.status(400).json({ message: '無効なリクエストタイプです' });
            }

            console.log('Fetched circles:', circles);
            return res.status(200).json({ circles });
        } else if (req.method === 'POST') {
            // サークル作成のコード（変更なし）
            // サークルの作成
            const { name, theme, genre, gender, details } = req.body;

            // 入力値のバリデーション
            if (!name || !theme || !genre || !gender) {
                return res.status(400).json({ message: '必須フィールドが入力されていません' });
            }

            // サークルの作成
            const [result] = await pool.query(
                'INSERT INTO circles (name, theme, genre, gender, details, creator_id) VALUES (?, ?, ?, ?, ?, ?)',
                [name, theme, genre, gender, details, user.userId]
            );

            // 作成者をサークルメンバーとして追加
            await pool.query(
                'INSERT INTO circle_members (circle_id, user_id) VALUES (?, ?)',
                [result.insertId, user.userId]
            );

            res.status(201).json({
                message: 'サークルが正常に作成されました',
                circleId: result.insertId
            });

        } else {
            return res.status(405).json({ message: 'Method Not Allowed' });
        }
    } catch (error) {
        console.error('Error in circles API:', error);
        res.status(500).json({ message: 'サーバーエラーが発生しました' });
    }
}

---
// pages\api\cron.js


---
// pages\api\delete-past-gatherings.js


---
// pages\api\gatherings\[id]\join.js


---
// pages\api\gatherings\[id]\participants.js
import pool from '../../../../lib/db';
import verifyToken from '../../../../utils/auth';

export default async function handler(req, res) {
    const user = verifyToken(req);
    if (!user) {
        return res.status(401).json({ message: '認証が必要です' });
    }

    const { id } = req.query;

    if (req.method === 'GET') {
        try {
            const [participants] = await pool.query(
                `SELECT DISTINCT u.id, u.username, gp.status
         FROM gathering_participants gp
         JOIN users u ON gp.user_id = u.id
         WHERE gp.gathering_id = ?
         GROUP BY u.id
         ORDER BY gp.updated_at DESC`,
                [id]
            );

            res.status(200).json({ participants });
        } catch (error) {
            console.error('Error in gathering participants API:', error);
            res.status(500).json({ message: 'サーバーエラーが発生しました' });
        }
    } else {
        res.status(405).json({ message: 'Method Not Allowed' });
    }
}

---
// pages\api\gatherings\[id]\participate.js
import pool from '../../../../lib/db';
import verifyToken from '../../../../utils/auth';

export default async function handler(req, res) {
    const user = verifyToken(req);
    if (!user) {
        return res.status(401).json({ message: '認証が必要です' });
    }

    const { id } = req.query;
    const { status } = req.body;

    if (req.method === 'POST') {
        try {
            if (status !== 'accepted' && status !== 'declined') {
                return res.status(400).json({ message: '無効なステータスです' });
            }

            // 既存のエントリーを更新するか、新しいエントリーを挿入する
            const [result] = await pool.query(
                `INSERT INTO gathering_participants (gathering_id, user_id, status, updated_at)
                 VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                 ON DUPLICATE KEY UPDATE status = ?, updated_at = CURRENT_TIMESTAMP`,
                [id, user.userId, status, status]
            );

            res.status(200).json({ message: '参加状況が更新されました' });
        } catch (error) {
            console.error('Error in gathering participate API:', error);
            res.status(500).json({ message: 'サーバーエラーが発生しました' });
        }
    } else {
        res.status(405).json({ message: 'Method Not Allowed' });
    }
}

---
// pages\api\gatherings\[id].js
import pool from '../../../lib/db';
import verifyToken from '../../../utils/auth';

export default async function handler(req, res) {
    const user = verifyToken(req);
    if (!user) {
        return res.status(401).json({ message: '認証が必要です' });
    }

    const { id } = req.query;

    if (req.method === 'GET') {
        try {
            const [gatherings] = await pool.query(
                `SELECT g.*, c.name as circle_name, gp.status as user_status
         FROM gatherings g
         JOIN circles c ON g.circle_id = c.id
         LEFT JOIN gathering_participants gp ON g.id = gp.gathering_id AND gp.user_id = ?
         WHERE g.id = ?`,
                [user.userId, id]
            );

            if (gatherings.length === 0) {
                return res.status(404).json({ message: '寄合が見つかりません' });
            }

            const gathering = gatherings[0];
            const userStatus = gathering.user_status;
            delete gathering.user_status;

            // URL を生成
            gathering.url = `https://wsapp.cs.kobe-u.ac.jp/meetcs27/${gathering.meeting_id}?user=${user.userId}`;


            res.status(200).json({ gathering, userStatus });
        } catch (error) {
            console.error('Error in gathering detail API:', error);
            res.status(500).json({ message: 'サーバーエラーが発生しました' });
        }
    } else {
        res.status(405).json({ message: 'Method Not Allowed' });
    }
}

---
// pages\api\gatherings.js
import crypto from 'crypto';
import pool from '../../lib/db';
import verifyToken from '../../utils/auth';
export default async function handler(req, res) {
    const user = verifyToken(req);
    if (!user) {
        return res.status(401).json({ message: '認証が必要です' });
    }

    if (req.method === 'GET') {
        try {
            const [gatherings] = await pool.query(
                `SELECT g.id, g.theme, g.datetime, c.name as circle_name, 
                CASE 
                  WHEN g.creator_id = ? THEN '作成者'
                  ELSE gp.status 
                END as status
               FROM gatherings g
               JOIN circles c ON g.circle_id = c.id
               LEFT JOIN gathering_participants gp ON g.id = gp.gathering_id AND gp.user_id = ?
               WHERE g.creator_id = ? OR gp.user_id = ?
               ORDER BY g.datetime DESC`,
                [user.userId, user.userId, user.userId, user.userId]
            );

            const participatingGatherings = gatherings.filter(g => g.status === 'accepted' || g.status === '作成者');
            const declinedGatherings = gatherings.filter(g => g.status === 'declined');
            const invitedGatherings = gatherings.filter(g => g.status === 'invited');

            res.status(200).json({
                participatingGatherings,
                declinedGatherings,
                invitedGatherings
            });
        } catch (error) {
            console.error('Error in gatherings API:', error);
            res.status(500).json({ message: 'サーバーエラーが発生しました' });
        }
    } else if (req.method === 'POST') {
        try {
            const user = verifyToken(req);
            if (!user) {
                return res.status(401).json({ message: '認証が必要です' });
            }

            const { circleId, theme, datetime, details } = req.body;

            // 入力値のバリデーション
            if (!circleId || !theme || !datetime) {
                return res.status(400).json({ message: '必須フィールドが入力されていません' });
            }

            // ユーザーがサークルのメンバーであることを確認
            const [memberCheck] = await pool.query(
                'SELECT * FROM circle_members WHERE circle_id = ? AND user_id = ?',
                [circleId, user.userId]
            );

            if (memberCheck.length === 0) {
                return res.status(403).json({ message: 'このサークルのメンバーではありません' });
            }

            // ユニークな meeting_id を生成
            let meetingId;
            let isUnique = false;
            while (!isUnique) {
                meetingId = crypto.randomBytes(8).toString('hex');
                const [existingMeetings] = await pool.query(
                    'SELECT id FROM gatherings WHERE meeting_id = ?',
                    [meetingId]
                );
                if (existingMeetings.length === 0) {
                    isUnique = true;
                }
            }

            // 寄合の作成
            const [result] = await pool.query(
                'INSERT INTO gatherings (circle_id, creator_id, theme, datetime, details, meeting_id) VALUES (?, ?, ?, ?, ?, ?)',
                [circleId, user.userId, theme, datetime, details, meetingId]
            );

            // サークルメンバーを寄合に招待
            const [members] = await pool.query(
                'SELECT user_id FROM circle_members WHERE circle_id = ?',
                [circleId]
            );

            for (const member of members) {
                await pool.query(
                    'INSERT INTO gathering_participants (gathering_id, user_id, status) VALUES (?, ?, ?)',
                    [result.insertId, member.user_id, member.user_id === user.userId ? 'accepted' : 'invited']
                );
            }

            res.status(201).json({
                message: '寄合が正常に作成され、メンバーに招待が送信されました',
                gatheringId: result.insertId,
                meetingId: meetingId
            });
        } catch (error) {
            console.error(error);
            res.status(500).json({ message: 'サーバーエラーが発生しました' });
        }
    }
}

---
// pages\api\invitations\[id]\respond.js
import pool from '../../../../lib/db';
import verifyToken from '../../../../utils/auth';

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    try {
        const user = verifyToken(req);
        if (!user) {
            return res.status(401).json({ message: '認証が必要です' });
        }

        const { id } = req.query;
        const { status } = req.body;

        if (status !== 'accepted' && status !== 'declined') {
            return res.status(400).json({ message: '無効なステータスです' });
        }

        const [result] = await pool.query(
            'UPDATE gathering_participants SET status = ? WHERE id = ? AND user_id = ?',
            [status, id, user.userId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: '招待が見つかりません' });
        }

        res.status(200).json({ message: '招待への返答が完了しました' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'サーバーエラーが発生しました' });
    }
}

---
// pages\api\invitations.js
import pool from '../../lib/db';
import verifyToken from '../../utils/auth';

export default async function handler(req, res) {
    if (req.method !== 'GET') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    try {
        const user = verifyToken(req);
        if (!user) {
            return res.status(401).json({ message: '認証が必要です' });
        }

        const [invitations] = await pool.query(
            `SELECT gp.id, g.theme, g.datetime, c.name as circle_name
       FROM gathering_participants gp
       JOIN gatherings g ON gp.gathering_id = g.id
       JOIN circles c ON g.circle_id = c.id
       WHERE gp.user_id = ? AND gp.status = 'invited'`,
            [user.userId]
        );

        console.log('Fetched invitations:', invitations); // デバッグ用

        res.status(200).json({ invitations });
    } catch (error) {
        console.error('Error in invitations API:', error);
        res.status(500).json({ message: 'サーバーエラーが発生しました' });
    }
}

---
// pages\api\login.js
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import pool from '../../lib/db';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  const { userId, password } = req.body;

  try {
    // ユーザーの検索
    const [users] = await pool.query(
      'SELECT * FROM users WHERE user_id = ?',
      [userId]
    );

    if (users.length === 0) {
      return res.status(401).json({ message: 'ユーザーIDまたはパスワードが正しくありません' });
    }

    const user = users[0];

    // パスワードの照合
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return res.status(401).json({ message: 'ユーザーIDまたはパスワードが正しくありません' });
    }

    // JWTトークンの生成
    const token = jwt.sign(
      {
        userId: user.id,
        user_id: user.user_id,
        displayName: Buffer.from(user.display_name).toString('base64')
      },
      JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.status(200).json({
      token,
      userId: user.id,
      user_id: user.user_id,
      displayName: Buffer.from(user.display_name).toString('base64')
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'サーバーエラーが発生しました' });
  }
}

---
// pages\api\register.js
import bcrypt from 'bcryptjs';
import pool from '../../lib/db';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  const { displayName, userId, password } = req.body;

  try {
    // ユーザーIDの重複チェック
    const [existingUsers] = await pool.query(
      'SELECT * FROM users WHERE user_id = ?',
      [userId]
    );

    if (existingUsers.length > 0) {
      return res.status(400).json({ message: 'ユーザーIDは既に使用されています' });
    }

    // パスワードのハッシュ化
    const hashedPassword = await bcrypt.hash(password, 10);

    // ユーザーの作成
    const [result] = await pool.query(
      'INSERT INTO users (display_name, user_id, password) VALUES (?, ?, ?)',
      [displayName, userId, hashedPassword]
    );

    res.status(201).json({ message: 'ユーザーが正常に登録されました', userId: result.insertId });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'サーバーエラーが発生しました' });
  }
}

---
// pages\api\upcoming-gatherings.js
import pool from '../../lib/db';
import verifyToken from '../../utils/auth';

export default async function handler(req, res) {
    if (req.method !== 'GET') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    const user = verifyToken(req);
    if (!user) {
        return res.status(401).json({ message: '認証が必要です' });
    }

    try {
        const [gatherings] = await pool.query(
            `SELECT g.id, g.theme, g.datetime
            FROM gatherings g
            JOIN gathering_participants gp ON g.id = gp.gathering_id
            WHERE gp.user_id = ? 
            AND g.datetime > DATE_SUB(NOW(), INTERVAL 2 MINUTE)
            AND g.datetime < DATE_ADD(NOW(), INTERVAL 1 DAY)
            ORDER BY g.datetime ASC`,
            [user.userId]
        );

        const formattedGatherings = gatherings.map(g => ({
            ...g,
            datetime: new Date(g.datetime).toISOString()
        }));

        const serverTime = new Date().toISOString();
        res.status(200).json({
            upcomingGatherings: formattedGatherings,
            serverTime: serverTime
        });
    } catch (error) {
        console.error('Error in upcoming gatherings API:', error);
        res.status(500).json({ message: 'サーバーエラーが発生しました' });
    }
}

---
// pages\api\user-circles.js
import pool from '../../lib/db';
import verifyToken from '../../utils/auth';

export default async function handler(req, res) {
    if (req.method !== 'GET') {
        return res.status(405).json({ message: 'Method Not Allowed' });
    }

    try {
        const user = verifyToken(req);
        if (!user) {
            return res.status(401).json({ message: '認証が必要です' });
        }

        const [circles] = await pool.query(
            `SELECT c.* 
       FROM circles c
       JOIN circle_members cm ON c.id = cm.circle_id
       WHERE cm.user_id = ?`,
            [user.userId]
        );

        res.status(200).json({ circles });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'サーバーエラーが発生しました' });
    }
}

---
// pages\check-circles.js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function CheckCircles() {
    const [circles, setCircles] = useState([]);
    const [error, setError] = useState('');
    const router = useRouter();

    useEffect(() => {
        fetchCircles();
    }, []);

    const fetchCircles = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/circles?type=check', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                console.log('Fetched circles:', data.circles); // デバッグ用
                setCircles(data.circles);
            } else {
                setError('サークル情報の取得に失敗しました');
            }
        } catch (error) {
            console.error('Error fetching circles:', error); // デバッグ用
            setError('サークル情報の取得中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
            <div className="relative py-3 sm:max-w-xl sm:mx-auto">
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
                <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
                    <div className="max-w-md mx-auto">
                        <h2 className="text-2xl font-semibold mb-4">参加中のサークル</h2>
                        {error && <p className="text-red-500 mb-4">{error}</p>}
                        {circles.length > 0 ? (
                            <ul className="space-y-4">
                                {circles.map((circle) => (
                                    <li key={circle.id} className="border p-4 rounded-md">
                                        <h3 className="font-semibold">{circle.name}</h3>
                                        <p>テーマ: {circle.theme}</p>
                                        <p>ジャンル: {circle.genre}</p>
                                        <button
                                            onClick={() => router.push(`/circle/${circle.id}`)}
                                            className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                                        >
                                            詳細を見る
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p>参加しているサークルはありません。</p>
                        )}
                        <button
                            onClick={() => router.push('/home')}
                            className="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                        >
                            ホームに戻る
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

---
// pages\check-invitations.js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function CheckInvitations() {
    const [invitations, setInvitations] = useState([]);
    const [error, setError] = useState('');
    const router = useRouter();

    useEffect(() => {
        fetchInvitations();
    }, []);

    const fetchInvitations = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/invitations', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                // 現在時刻より後の寄合のみをフィルタリング
                const futureInvitations = data.invitations.filter(invitation =>
                    new Date(invitation.datetime) > new Date()
                );
                setInvitations(futureInvitations);
            } else {
                setError('招待の取得に失敗しました');
            }
        } catch (error) {
            console.error('Error fetching invitations:', error);
            setError('招待の取得中にエラーが発生しました');
        }
    };

    const handleResponse = async (invitationId, status) => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/invitations/${invitationId}/respond`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ status })
            });
            if (response.ok) {
                fetchInvitations(); // 招待リストを更新
            } else {
                setError('招待への返答に失敗しました');
            }
        } catch (error) {
            setError('招待への返答中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
            <div className="relative py-3 sm:max-w-xl sm:mx-auto">
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
                <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
                    <div className="max-w-md mx-auto">
                        <h2 className="text-2xl font-semibold mb-4">寄合招待の確認</h2>
                        {error && <p className="text-red-500 mb-4">{error}</p>}
                        {invitations.length > 0 ? (
                            <ul className="space-y-4">
                                {invitations.map((invitation) => (
                                    <li key={invitation.id} className="border p-4 rounded-md">
                                        <h3 className="font-semibold">{invitation.theme}</h3>
                                        <p>日時: {new Date(invitation.datetime).toLocaleString()}</p>
                                        <p>サークル: {invitation.circle_name}</p>
                                        <div className="mt-2">
                                            <button
                                                onClick={() => handleResponse(invitation.id, 'accepted')}
                                                className="mr-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                                            >
                                                参加する
                                            </button>
                                            <button
                                                onClick={() => handleResponse(invitation.id, 'declined')}
                                                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
                                            >
                                                参加しない
                                            </button>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p>現在、招待はありません。</p>
                        )}
                        <button
                            onClick={() => router.push('/home')}
                            className="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                        >
                            ホームに戻る
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

---
// pages\circle\[id].js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function CircleDetail() {
    const [circle, setCircle] = useState(null);
    const [error, setError] = useState('');
    const router = useRouter();
    const { id } = router.query;

    useEffect(() => {
        if (id) {
            fetchCircleDetail();
        }
    }, [id]);

    const fetchCircleDetail = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/circles/${id}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                setCircle(data.circle);
            } else {
                setError('サークル情報の取得に失敗しました');
            }
        } catch (error) {
            setError('サークル情報の取得中にエラーが発生しました');
        }
    };

    if (error) return <div className="text-red-500">{error}</div>;
    if (!circle) return <div>Loading...</div>;

    return (
        <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
            <div className="relative py-3 sm:max-w-xl sm:mx-auto">
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
                <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
                    <div className="max-w-md mx-auto">
                        <h2 className="text-2xl font-semibold mb-4">{circle.name}</h2>
                        <p>テーマ: {circle.theme}</p>
                        <p>ジャンル: {circle.genre}</p>
                        <p>対象性別: {circle.gender}</p>
                        <p>詳細: {circle.details}</p>
                        <button
                            onClick={() => router.push('/check-circles')}
                            className="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                        >
                            サークル一覧に戻る
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

---
// pages\create-circle.js
import { useRouter } from 'next/router';
import { useState } from 'react';

export default function CreateCircle() {
    const [name, setName] = useState('');
    const [theme, setTheme] = useState('');
    const [genre, setGenre] = useState('');
    const [gender, setGender] = useState('');
    const [details, setDetails] = useState('');
    const [error, setError] = useState('');
    const router = useRouter();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/circles', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ name, theme, genre, gender, details }),
            });

            if (response.ok) {
                router.push('/home');
            } else {
                const data = await response.json();
                setError(data.message);
            }
        } catch (error) {
            setError('サークル作成中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
            <div className="sm:mx-auto sm:w-full sm:max-w-md">
                <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                    サークルを作成
                </h2>
            </div>

            <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                    <form className="space-y-6" onSubmit={handleSubmit}>
                        <div>
                            <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                                サークル名
                            </label>
                            <input
                                id="name"
                                name="name"
                                type="text"
                                required
                                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                            />
                        </div>

                        <div>
                            <label htmlFor="theme" className="block text-sm font-medium text-gray-700">
                                サークルテーマ
                            </label>
                            <input
                                id="theme"
                                name="theme"
                                type="text"
                                required
                                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={theme}
                                onChange={(e) => setTheme(e.target.value)}
                            />
                        </div>

                        <div>
                            <label htmlFor="genre" className="block text-sm font-medium text-gray-700">
                                ジャンル
                            </label>
                            <select
                                id="genre"
                                name="genre"
                                required
                                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={genre}
                                onChange={(e) => setGenre(e.target.value)}
                            >
                                <option value="">選択してください</option>
                                <option value="スポーツ">スポーツ</option>
                                <option value="音楽">音楽</option>
                                <option value="芸術">芸術</option>
                                <option value="学習">学習</option>
                                <option value="その他">その他</option>
                            </select>
                        </div>

                        <div>
                            <label htmlFor="gender" className="block text-sm font-medium text-gray-700">
                                対象性別
                            </label>
                            <select
                                id="gender"
                                name="gender"
                                required
                                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={gender}
                                onChange={(e) => setGender(e.target.value)}
                            >
                                <option value="">選択してください</option>
                                <option value="男性のみ">男性のみ</option>
                                <option value="女性のみ">女性のみ</option>
                                <option value="両方">両方</option>
                            </select>
                        </div>

                        <div>
                            <label htmlFor="details" className="block text-sm font-medium text-gray-700">
                                詳細事項
                            </label>
                            <textarea
                                id="details"
                                name="details"
                                rows="3"
                                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={details}
                                onChange={(e) => setDetails(e.target.value)}
                            ></textarea>
                        </div>

                        {error && (
                            <div className="text-red-500 text-sm mt-2">
                                {error}
                            </div>
                        )}

                        <div>
                            <button
                                type="submit"
                                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                            >
                                作成
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}

---
// pages\create-gathering.js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

const CreateGathering = () => {
    const [circles, setCircles] = useState([]);
    const [selectedCircle, setSelectedCircle] = useState('');
    const [theme, setTheme] = useState('');
    const [date, setDate] = useState('');
    const [time, setTime] = useState('');
    const [details, setDetails] = useState('');
    const [error, setError] = useState('');
    const router = useRouter();

    useEffect(() => {
        fetchUserCircles();
    }, []);

    const fetchUserCircles = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/user-circles', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                setCircles(data.circles);
            } else {
                setError('サークル情報の取得に失敗しました');
            }
        } catch (error) {
            setError('サークル情報の取得中にエラーが発生しました');
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/gatherings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    circleId: selectedCircle,
                    theme,
                    datetime: `${date}T${time}`,
                    details
                }),
            });

            if (response.ok) {
                router.push('/home');
            } else {
                const data = await response.json();
                setError(data.message);
            }
        } catch (error) {
            setError('寄合作成中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
            <div className="sm:mx-auto sm:w-full sm:max-w-md">
                <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                    寄合を作成
                </h2>
            </div>

            <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
                <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                    <form className="space-y-6" onSubmit={handleSubmit}>
                        <div>
                            <label htmlFor="circle" className="block text-sm font-medium text-gray-700">
                                サークル
                            </label>
                            <select
                                id="circle"
                                name="circle"
                                required
                                className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={selectedCircle}
                                onChange={(e) => setSelectedCircle(e.target.value)}
                            >
                                <option value="">選択してください</option>
                                {circles.map((circle) => (
                                    <option key={circle.id} value={circle.id}>{circle.name}</option>
                                ))}
                            </select>
                        </div>

                        <div>
                            <label htmlFor="theme" className="block text-sm font-medium text-gray-700">
                                テーマ
                            </label>
                            <input
                                id="theme"
                                name="theme"
                                type="text"
                                required
                                className="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={theme}
                                onChange={(e) => setTheme(e.target.value)}
                            />
                        </div>

                        <div>
                            <label htmlFor="date" className="block text-sm font-medium text-gray-700">
                                日付
                            </label>
                            <input
                                id="date"
                                name="date"
                                type="date"
                                required
                                className="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={date}
                                onChange={(e) => setDate(e.target.value)}
                            />
                        </div>

                        <div>
                            <label htmlFor="time" className="block text-sm font-medium text-gray-700">
                                時間
                            </label>
                            <input
                                id="time"
                                name="time"
                                type="time"
                                required
                                className="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={time}
                                onChange={(e) => setTime(e.target.value)}
                            />
                        </div>

                        <div>
                            <label htmlFor="details" className="block text-sm font-medium text-gray-700">
                                詳細
                            </label>
                            <textarea
                                id="details"
                                name="details"
                                rows="3"
                                className="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                value={details}
                                onChange={(e) => setDetails(e.target.value)}
                            ></textarea>
                        </div>

                        {error && (
                            <div className="text-red-500 text-sm mt-2">
                                {error}
                            </div>
                        )}

                        <div>
                            <button
                                type="submit"
                                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                            >
                                作成
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default CreateGathering;

---
// pages\gathering\[id].js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function GatheringDetail() {
    const [gathering, setGathering] = useState(null);
    const [participants, setParticipants] = useState([]);
    const [userStatus, setUserStatus] = useState(null);
    const [error, setError] = useState('');
    const router = useRouter();
    const { id } = router.query;
    const [isGatheringStarted, setIsGatheringStarted] = useState(false);

    useEffect(() => {
        if (id) {
            fetchGatheringDetail();
            fetchParticipants();
        }
    }, [id]);

    useEffect(() => {
        if (gathering) {
            const checkGatheringStart = () => {
                const now = new Date();
                const gatheringTime = new Date(gathering.datetime);
                const thirtyMinutesLater = new Date(gatheringTime.getTime() + 30 * 60000);
                if (now >= gatheringTime && now < thirtyMinutesLater) {
                    setIsGatheringStarted(true);
                }
            };

            checkGatheringStart();
            const intervalId = setInterval(checkGatheringStart, 60000); // 1分ごとにチェック

            return () => clearInterval(intervalId);
        }
    }, [gathering]);

    const fetchGatheringDetail = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/gatherings/${id}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                setGathering(data.gathering);
                setUserStatus(data.userStatus);
            } else {
                setError('寄合の詳細情報の取得に失敗しました');
            }
        } catch (error) {
            setError('寄合の詳細情報の取得中にエラーが発生しました');
        }
    };

    const fetchParticipants = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/gatherings/${id}/participants`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                setParticipants(data.participants);
            } else {
                setError('参加者情報の取得に失敗しました');
            }
        } catch (error) {
            setError('参加者情報の取得中にエラーが発生しました');
        }
    };

    const handleParticipation = async (status) => {
        if (userStatus && !confirm(`参加状況を "${status}" に変更しますか？`)) {
            return;
        }

        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/gatherings/${id}/participate`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status })
            });
            if (response.ok) {
                setUserStatus(status);
                fetchParticipants();
            } else {
                setError('参加状況の更新に失敗しました');
            }
        } catch (error) {
            setError('参加状況の更新中にエラーが発生しました');
        }
    };

    const handleJoinGathering = () => {
        if (gathering.url) {
            window.open(gathering.url, '_blank');
        }
    };

    if (error) return <div className="text-red-500">{error}</div>;
    if (!gathering) return <div>Loading...</div>;

    return (
        <div className="min-h-screen bg-yellow-50 py-8 px-4 text-gray-800">
            <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-8 border-4 border-blue-500">
                {error && (
                    <div className="text-red-600 text-2xl mb-6 font-bold bg-red-100 p-4 rounded-lg border-2 border-red-500">
                        {error}
                    </div>
                )}
                {!gathering ? (
                    <div className="text-3xl font-bold text-center">読み込み中...</div>
                ) : (
                    <>
                        <h1 className="text-4xl font-bold mb-8 text-center bg-blue-100 p-4 rounded-lg">
                            {gathering.theme}
                        </h1>
                        <div className="space-y-6 text-2xl">
                            <p className="bg-gray-100 p-4 rounded-lg">
                                <span className="font-bold">日時:</span> {new Date(gathering.datetime).toLocaleString()}
                            </p>
                            <p className="bg-gray-100 p-4 rounded-lg">
                                <span className="font-bold">サークル:</span> {gathering.circle_name}
                            </p>
                            <p className="bg-gray-100 p-4 rounded-lg">
                                <span className="font-bold">詳細:</span> {gathering.details}
                            </p>
                            <p className="bg-gray-100 p-4 rounded-lg">
                                <span className="font-bold">参加用URL:</span><br />
                                {gathering.url ? (
                                    <a href={gathering.url} target="_blank" rel="noopener noreferrer"
                                        className="text-blue-600 hover:underline block mt-2 text-center bg-green-200 p-4 rounded-lg border-2 border-green-500">
                                        ここをタップして参加する
                                    </a>
                                ) : '未設定'}
                            </p>
                            <p className="bg-gray-100 p-4 rounded-lg">
                                <span className="font-bold">あなたの参加状況:</span><br />
                                <span className="block mt-2 text-center text-3xl font-bold">
                                    {userStatus === 'accepted' ? '参加予定' :
                                        userStatus === 'declined' ? '不参加' : '未回答'}
                                </span>
                            </p>
                        </div>

                        <div className="mt-12 space-y-6">
                            <button
                                onClick={() => handleParticipation('accepted')}
                                className={`w-full py-6 text-3xl font-bold rounded-xl ${userStatus === 'accepted'
                                    ? 'bg-green-300 text-green-800 cursor-not-allowed'
                                    : 'bg-green-500 text-white hover:bg-green-600 active:bg-green-700'
                                    }`}
                                disabled={userStatus === 'accepted'}
                            >
                                参加する
                            </button>
                            <button
                                onClick={() => handleParticipation('declined')}
                                className={`w-full py-6 text-3xl font-bold rounded-xl ${userStatus === 'declined'
                                    ? 'bg-red-300 text-red-800 cursor-not-allowed'
                                    : 'bg-red-500 text-white hover:bg-red-600 active:bg-red-700'
                                    }`}
                                disabled={userStatus === 'declined'}
                            >
                                参加しない
                            </button>
                        </div>

                        <h2 className="text-3xl font-bold mt-16 mb-6 text-center bg-blue-100 p-4 rounded-lg">参加者一覧</h2>
                        <ul className="space-y-4 text-2xl">
                            {participants.map((participant) => (
                                <li key={participant.id} className="flex items-center justify-between bg-gray-100 p-4 rounded-lg">
                                    <span>{participant.username}</span>
                                    <span className={`px-4 py-2 rounded-full ${participant.status === 'accepted' ? 'bg-green-200 text-green-800' :
                                        participant.status === 'declined' ? 'bg-red-200 text-red-800' :
                                            'bg-yellow-200 text-yellow-800'
                                        }`}>
                                        {participant.status === 'accepted' ? '参加' :
                                            participant.status === 'declined' ? '不参加' : '未回答'}
                                    </span>
                                </li>
                            ))}
                        </ul>

                        <button
                            onClick={() => router.push('/gathering-list')}
                            className="mt-16 w-full py-6 bg-blue-500 text-white text-3xl font-bold rounded-xl hover:bg-blue-600 active:bg-blue-700"
                        >
                            寄合一覧に戻る
                        </button>
                    </>
                )}
                {isGatheringStarted && gathering.url && (
                    <div className="mt-8 bg-yellow-100 p-4 rounded-lg border-2 border-yellow-500">
                        <p className="text-2xl font-bold text-center">寄合が始まりました！</p>
                        <button
                            onClick={handleJoinGathering}
                            className="mt-4 w-full py-4 bg-green-500 text-white text-2xl font-bold rounded-xl hover:bg-green-600 active:bg-green-700"
                        >
                            寄合に参加する
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
}

---
// pages\gathering-list.js
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function GatheringList() {
    const [participatingGatherings, setParticipatingGatherings] = useState([]);
    const [declinedGatherings, setDeclinedGatherings] = useState([]);
    const [invitedGatherings, setInvitedGatherings] = useState([]);
    const [error, setError] = useState('');
    const router = useRouter();

    useEffect(() => {
        fetchGatherings();
    }, []);

    const fetchGatherings = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/gatherings', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                const currentTime = new Date();
                setParticipatingGatherings(filterFutureGatherings(data.participatingGatherings, currentTime));
                setDeclinedGatherings(filterFutureGatherings(data.declinedGatherings, currentTime));
                setInvitedGatherings(filterFutureGatherings(data.invitedGatherings, currentTime));
            } else {
                setError('寄合の取得に失敗しました');
            }
        } catch (error) {
            setError('寄合の取得中にエラーが発生しました');
        }
    };

    const filterFutureGatherings = (gatherings, currentTime) => {
        return gatherings.filter(gathering => {
            const gatheringTime = new Date(gathering.datetime);
            const thirtyMinutesLater = new Date(gatheringTime.getTime() + 2 * 60000);
            return thirtyMinutesLater > currentTime;
        });
    };

    const renderGatheringList = (gatherings, title, icon) => (
        <div className="mb-8 bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-4 flex items-center">
                <span className="mr-2">{icon}</span>
                {title}
            </h2>
            {gatherings.length > 0 ? (
                <ul className="space-y-4">
                    {gatherings.map((gathering) => (
                        <li key={gathering.id} className="border-2 border-gray-200 p-4 rounded-lg hover:bg-gray-50">
                            <h3 className="text-xl font-semibold mb-2">{gathering.theme}</h3>
                            <p className="text-lg mb-1">
                                <span role="img" aria-label="日時" className="mr-2">🕒</span>
                                {new Date(gathering.datetime).toLocaleString()}
                            </p>
                            <p className="text-lg mb-2">
                                <span role="img" aria-label="サークル" className="mr-2">👥</span>
                                {gathering.circle_name}
                            </p>
                            <Link href={`/gathering/${gathering.id}`} className="inline-block mt-2 bg-blue-500 text-white text-lg font-semibold py-2 px-4 rounded-lg hover:bg-blue-600">
                                詳細を見る
                            </Link>
                        </li>
                    ))}
                </ul>
            ) : (
                <p className="text-xl">該当する寄合はありません。</p>
            )}
        </div>
    );

    return (
        <div className="min-h-screen bg-gray-100 p-4">
            <div className="max-w-3xl mx-auto">
                <h1 className="text-3xl font-bold mb-8 text-center">寄合一覧</h1>
                {error && <p className="text-xl text-red-500 mb-4 text-center">{error}</p>}

                {renderGatheringList(participatingGatherings, "参加予定の寄合", "🎉")}
                {renderGatheringList(declinedGatherings, "不参加の寄合", "🚫")}
                {renderGatheringList(invitedGatherings, "招待された寄合（未回答）", "✉️")}

                <button
                    onClick={() => router.push('/home')}
                    className="mt-8 w-full bg-green-500 text-white text-xl font-bold py-4 px-6 rounded-lg hover:bg-green-600"
                >
                    ホームに戻る
                </button>
            </div>
        </div>
    );
}

---
// pages\home.js
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useCallback, useEffect, useRef, useState } from 'react';

export default function Home() {
    const [displayName, setDisplayName] = useState('');
    const [upcomingGatherings, setUpcomingGatherings] = useState([]);
    const router = useRouter();
    const checkIntervalRef = useRef(null);
    const lastCheckTimeRef = useRef(null);

    const fetchUpcomingGatherings = useCallback(async () => {
        try {
            const token = localStorage.getItem('token');
            console.log('Fetching upcoming gatherings...');
            const response = await fetch('/api/upcoming-gatherings', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                setUpcomingGatherings(data.upcomingGatherings);
                console.log('Updated upcoming gatherings:', data.upcomingGatherings);

                if (data.serverTime) {
                    const serverTime = new Date(data.serverTime);
                    const localTime = new Date();
                    const timeOffset = serverTime.getTime() - localTime.getTime();
                    localStorage.setItem('serverTimeOffset', timeOffset.toString());
                }
            } else {
                console.error('Error fetching upcoming gatherings:', response.statusText);
            }
        } catch (error) {
            console.error('Error fetching upcoming gatherings:', error);
        }
    }, []);

    const notifyAndRedirect = useCallback((gathering) => {
        console.log('Notifying and redirecting for gathering:', gathering);
        if (Notification.permission === "granted") {
            new Notification(`寄合「${gathering.theme}」が始まります！`, {
                body: 'クリックして詳細画面に移動します。',
                icon: '/path/to/your/notification-icon.png' // 通知用のアイコンがあれば指定してください
            });
        }
        // 寄合詳細画面へ遷移
        router.push(`/gathering/${gathering.id}`);
    }, [router]);

    const checkGatheringTime = useCallback(() => {
        const now = new Date();
        const serverTimeOffset = localStorage.getItem('serverTimeOffset');
        const adjustedNow = serverTimeOffset ? new Date(now.getTime() + parseInt(serverTimeOffset)) : now;

        console.log('Checking gathering time at:', adjustedNow.toISOString());

        if (lastCheckTimeRef.current && (adjustedNow - lastCheckTimeRef.current) < 55000) {
            console.log('Skipping check, last check was too recent');
            return;
        }

        lastCheckTimeRef.current = adjustedNow;

        upcomingGatherings.forEach(gathering => {
            const gatheringTime = new Date(gathering.datetime);
            const twoMinutesBefore = new Date(gatheringTime.getTime() - 2 * 60000);
            const thirtyMinutesLater = new Date(gatheringTime.getTime() + 2 * 60000);
            console.log(`Gathering: ${gathering.theme}, Time: ${gatheringTime.toISOString()}`);

            // 開始時間の2分前から30分後までの範囲で通知と遷移を行う
            if (adjustedNow >= twoMinutesBefore && adjustedNow < thirtyMinutesLater) {
                console.log('Gathering should start now or very soon!', gathering);
                notifyAndRedirect(gathering);
            }
        });
    }, [upcomingGatherings, notifyAndRedirect]);

    useEffect(() => {
        console.log('Home component mounted');
        const token = localStorage.getItem('token');
        if (!token) {
            console.log('No token found, redirecting to login');
            router.push('/login');
        } else {
            try {
                const decodedToken = JSON.parse(atob(token.split('.')[1]));
                const decodedName = atob(decodedToken.displayName);
                setDisplayName(decodedName);
                fetchUpcomingGatherings();
            } catch (error) {
                console.error('Error decoding token:', error);
                localStorage.removeItem('token');
                router.push('/login');
            }
        }

        if (typeof window !== 'undefined' && 'Notification' in window) {
            if (Notification.permission !== "granted" && Notification.permission !== "denied") {
                Notification.requestPermission();
            }
        }

        const fetchInterval = setInterval(fetchUpcomingGatherings, 60000); // 1分ごとに更新
        const checkInterval = setInterval(checkGatheringTime, 60000); // 1分ごとにチェック

        // コンポーネントがマウントされた直後にもチェックを実行
        checkGatheringTime();

        return () => {
            console.log('Home component unmounting');
            clearInterval(fetchInterval);
            clearInterval(checkInterval);
        };
    }, [fetchUpcomingGatherings, router, checkGatheringTime]);

    const handleLogout = () => {
        localStorage.removeItem('token');
        router.push('/login');
    };

    const containerStyle = {
        minHeight: '100vh',
        backgroundColor: '#f0f0f0',
        padding: '2rem',
    };

    const cardStyle = {
        maxWidth: '36rem',
        margin: '0 auto',
        backgroundColor: 'white',
        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        borderRadius: '1rem',
        padding: '2rem',
    };

    const buttonStyle = {
        display: 'flex',
        alignItems: 'center',
        width: '100%',
        padding: '1rem',
        backgroundColor: '#4a90e2',
        color: 'white',
        borderRadius: '0.5rem',
        marginBottom: '1rem',
        textDecoration: 'none',
        fontSize: '1.25rem',
        fontWeight: 'bold',
        border: 'none',
        cursor: 'pointer',
    };

    const iconStyle = {
        marginRight: '1rem',
        width: '2rem',
        height: '2rem',
    };

    return (
        <div style={containerStyle}>
            <div style={cardStyle}>
                <h1 style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '1.5rem', textAlign: 'center' }}>オンラインサークルサービス</h1>
                <p style={{ fontSize: '1.25rem', marginBottom: '0.5rem', textAlign: 'center' }}>{displayName}さん、サークルへようこそ</p>
                <p style={{ fontSize: '1.25rem', marginBottom: '1.5rem', textAlign: 'center' }}>なにをしますか？</p>
                <div>
                    <Link href="/join-circle" style={buttonStyle}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z" />
                        </svg>
                        サークルに入る
                    </Link>
                    <Link href="/check-circles" style={buttonStyle}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M9 9a2 2 0 114 0 2 2 0 01-4 0z" />
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a4 4 0 00-3.446 6.032l-2.261 2.26a1 1 0 101.414 1.415l2.261-2.261A4 4 0 1011 5z" clipRule="evenodd" />
                        </svg>
                        サークルを確認
                    </Link>
                    <Link href="/create-circle" style={buttonStyle}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                        </svg>
                        サークルを作成
                    </Link>
                    <Link href="/create-gathering" style={buttonStyle}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
                        </svg>
                        寄合を作成
                    </Link>
                    <Link href="/check-invitations" style={buttonStyle}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                        </svg>
                        寄合招待を確認
                    </Link>
                    <Link href="/gathering-list" style={buttonStyle}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
                        </svg>
                        寄合一覧
                    </Link>
                    <button onClick={handleLogout} style={{ ...buttonStyle, backgroundColor: '#e74c3c' }}>
                        <svg style={iconStyle} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clipRule="evenodd" />
                        </svg>
                        ログアウト
                    </button>
                </div>
            </div>
        </div>
    );
}

---
// pages\join-circle.js
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function JoinCircle() {
    const [circles, setCircles] = useState([]);
    const [error, setError] = useState('');
    const router = useRouter();

    useEffect(() => {
        fetchCircles();
    }, []);

    const fetchCircles = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/circles?type=join', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                const data = await response.json();
                setCircles(data.circles);
            } else {
                setError('サークル情報の取得に失敗しました');
            }
        } catch (error) {
            setError('サークル情報の取得中にエラーが発生しました');
        }
    };

    const handleJoin = async (circleId) => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/circles/${circleId}/join`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (response.ok) {
                // サークルに参加した後、リストから削除
                setCircles(circles.filter(circle => circle.id !== circleId));
            } else {
                const data = await response.json();
                setError(data.message);
            }
        } catch (error) {
            setError('サークル参加中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
            <div className="relative py-3 sm:max-w-xl sm:mx-auto">
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl"></div>
                <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
                    <div className="max-w-md mx-auto">
                        <h2 className="text-2xl font-semibold mb-4">参加可能なサークル</h2>
                        {error && <p className="text-red-500 mb-4">{error}</p>}
                        {circles.length > 0 ? (
                            <ul className="space-y-4">
                                {circles.map((circle) => (
                                    <li key={circle.id} className="border p-4 rounded-md">
                                        <h3 className="font-semibold">{circle.name}</h3>
                                        <p>テーマ: {circle.theme}</p>
                                        <p>ジャンル: {circle.genre}</p>
                                        <button
                                            onClick={() => handleJoin(circle.id)}
                                            className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                                        >
                                            参加する
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p>参加可能なサークルはありません。</p>
                        )}
                        <button
                            onClick={() => router.push('/home')}
                            className="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                        >
                            ホームに戻る
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

---
// pages\login.js
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';

export default function Login() {
    const [userId, setUserId] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const router = useRouter();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        try {
            const response = await fetch('/api/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, password }),
            });

            if (response.ok) {
                const data = await response.json();
                // トークンをローカルストレージに保存
                localStorage.setItem('token', data.token);
                router.push('/home');
            } else {
                const data = await response.json();
                setError(data.message);
            }
        } catch (error) {
            setError('ログイン中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-8">
                <div>
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                        ログイン
                    </h2>
                </div>
                <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
                    <input type="hidden" name="remember" defaultValue="true" />
                    <div className="rounded-md shadow-sm -space-y-px">
                        <div>
                            <label htmlFor="userId" className="sr-only">
                                ユーザーID
                            </label>
                            <input
                                id="userId"
                                name="userId"
                                type="text"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="ユーザーID"
                                value={userId}
                                onChange={(e) => setUserId(e.target.value)}
                            />
                        </div>
                        <div>
                            <label htmlFor="password" className="sr-only">
                                パスワード
                            </label>
                            <input
                                id="password"
                                name="password"
                                type="password"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="パスワード"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>
                    </div>

                    <div>
                        <button
                            type="submit"
                            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                            ログイン
                        </button>
                    </div>
                </form>
                <div className="text-center">
                    <Link href="/register" className="font-medium text-indigo-600 hover:text-indigo-500">
                        登録がまだの方はこちら
                    </Link>
                </div>
            </div>
        </div>
    );

    // エラーメッセージの表示を追加
    {
        error && (
            <div className="text-red-500 text-center mt-2">
                {error}
            </div>
        )
    }
}


---
// pages\register.js
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';

export default function Register() {
    const [displayName, setDisplayName] = useState('');
    const [userId, setUserId] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const router = useRouter();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        try {
            const response = await fetch('/api/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ displayName, userId, password }),
            });

            if (response.ok) {
                router.push('/login');
            } else {
                const data = await response.json();
                setError(data.message);
            }
        } catch (error) {
            setError('登録中にエラーが発生しました');
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-8">
                <div>
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                        新規登録
                    </h2>
                </div>
                <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
                    <input type="hidden" name="remember" defaultValue="true" />
                    <div className="rounded-md shadow-sm -space-y-px">
                        <div>
                            <label htmlFor="displayName" className="sr-only">
                                ユーザー名
                            </label>
                            <input
                                id="displayName"
                                name="displayName"
                                type="text"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="ユーザー名"
                                value={displayName}
                                onChange={(e) => setDisplayName(e.target.value)}
                            />
                        </div>
                        <div>
                            <label htmlFor="userId" className="sr-only">
                                ユーザーID
                            </label>
                            <input
                                id="userId"
                                name="userId"
                                type="text"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="ユーザーID"
                                value={userId}
                                onChange={(e) => setUserId(e.target.value)}
                            />
                        </div>
                        <div>
                            <label htmlFor="password" className="sr-only">
                                パスワード
                            </label>
                            <input
                                id="password"
                                name="password"
                                type="password"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder="パスワード"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>
                    </div>

                    {error && (
                        <div className="text-red-500 text-center mt-2">
                            {error}
                        </div>
                    )}

                    <div>
                        <button
                            type="submit"
                            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                            新規登録
                        </button>
                    </div>
                </form>
                <div className="text-center">
                    <Link href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
                        ログイン画面に戻る
                    </Link>
                </div>
            </div>
        </div>
    );
}

---
// pages\_app.js
import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
    return <Component {...pageProps} />
}

export default MyApp

---
// utils\auth.js
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;

export default function verifyToken(req) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) {
    throw new Error('No token provided');
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    return decoded;
  } catch (error) {
    throw new Error('Invalid token');
  }
}

